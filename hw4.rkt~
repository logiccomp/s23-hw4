#lang rosette/safe

(require rosette/lib/synthax)
(require rosette/lib/angelic)
(require quickcheck)


;; Problem 1
;;
;; Our first verifier will use a slightly extended version of the target language
;; you used in HW2. We'll add other arithmetic operations, but otherwise, leave
;; it the same. Your task is then to build a function that ensures that two different
;; stack-based programs are equivalent. This will be your "verifier" for optimizations.

(define-struct push [num] #:transparent)
(define-struct add [])
(define-struct mul [])
(define-struct sub [])
; A SimpleInstr is one of:
; - (make-push Number)
; - (make-add)
; - (make-mul)
; - (make-sub)

(define (simple-eval stk instrs)
  (local [; stack-binop : [Number Number -> Number] [List-of Number]
          ;               [List-of SimpleInstr] -> [List-of Number]
          ; evaluates a binary operator on top two numbers of stack, if present
          (define (stack-binop op stk instrs)
            (if (>= (length stk) 2)
                (simple-eval (cons (op (first stk) (second stk))
                            (rest (rest stk)))
                      instrs)
                (list)))

          ; eval-instr : Instr [List-of Number] [List-of SimpleInstr] -> [List-of Number]
          ; evaluates a single instruction, given a stack and rest of instructions
          (define (eval-instr i stk instrs)
            (cond [(add? i) (stack-binop + stk instrs)]
                  [(mul? i) (stack-binop * stk instrs)]
                  [(sub? i) (stack-binop - stk instrs)]
                  [(push? i) (simple-eval (cons (push-num i) stk) instrs)]))]
    (cond [(empty? instrs) stk]
          [(cons? instrs) (eval-instr (first instrs) stk (rest instrs))])))

; simple-stack-verify : [List-of SimpleInstr] [List-of SimpleInstr] -> Boolean
(define (simple-stack-verify p1 p2)
  ...)

;; Problem 2
;;
;; While super-optimizing relies on searching for the best program for a given function,
;; here we are going to do something simpler: a normal optimization. Given a stack program,
;; you want to detect the instruction sequence ... (make-push n) (make-push m) (make-add) ...
;; and replace it with (make-push (+ n m)). i.e., you are doing a very limited version of
;; what is called "constant folding". You do not need to do more constant folding
;; that only appears after you fold the first time -- i.e.,
;; (make-push n) (make-push m) (make-push o) (make-add) (make-add)
;; should turn into (make-push n) (make-push (+ m o)) (make-add)
;; rather than (make-push (+ n (+ m o))

; simple-const-fold : [List-of SimpleInstr] -> [List-of SimpleInstr]
(define (simple-const-fold p)
  ...)

;; Problem 3
;;
;; To check that the constant folding works, we want to do two things. First, we want to
;; verify using property based testing (PBT). To do this, your first task is to define
;; a generator for SimpleInstr

; choose-simple-instr : [Generator SimpleInstr]
(define choose-simple-instr ...)
                                       

;; Now, you can use this to define a property that generates a [List-of SimpleInstr] (which can
;; use the `sized` and `choose-list` helpers from the quickcheck library), calls
;; `simple-const-fold` on it, and uses `simple-stack-verify` to check that the result still behaves
;; the same.

(quickcheck (property [...] ...))

;; Problem 4
;;
;; To gain more confidence that your optimization is correct, define a symbolic version of an
;; instruction, `symbolic-instr`, using `choose*` to choose between different possibilies.

; symbolic-simpl-instr : -> [Symbolic SimpleInstr]
(define (symbolic-simple-instr) ...)

;; Now, define a list (`symbolic-simpl-prog`) that contains up to 6 `symbolic-simpl-instr`.
;; Think about how to construct a list: you may need another symbolic value to control the length.

; symbolic-simple-prog : [Symbolic [List-of SimpleInstr]]
(define symbolic-simple-prog ...)

;; Finally, you can now run `simple-const-fold` on this and `verify` that `simple-stack-verify`
;; returns true when passed the two inputs. This will have Rosette verify that for _all_ instruction
;; sequences up to length 6, your constant folding preserves meaning.
;;
;; Note: Rosette should print (unsat ...) if it was unable to find a
;; counter-example, which is what we want!

(verify (assert ...))

;; Problem 5
;;
;; Our `SimpleInstr` doesn't have variables, which means that "constant folding" could just
;; collapse the entire program to a single `(make-push n)`. So first, we are going to extend
;; `SimpleInstr` to `Instr`, which additionally has a case for `(make-var x)`, where `x`, for
;; simplicity, is a _number_, not a string (but represents a variable).
;; Variables will be substituted by `eval`, which takes, in addition
;; to a stack and program (list of instructions), a list of variable bindings (or substitution)
;; (mappings from 'names' to numbers).

(define-struct var [name] #:transparent)
; An Instr is one of:
; - (make-push Number)
; - (make-add)
; - (make-mul)
; - (make-sub)
; - (make-var Number)

(define-struct bind [name value] #:transparent)
; A Binding is a (make-bind Number Number)


; eval : [List-of Binding] [List-of Number] [List-of Instr] -> [List-of Number]
; will return an empty list if it reaches an unbound variable, or a malformed
; program (trying to do an operation without enough values on stack).
(define (eval env stk instrs)
  (local [; stack-binop : [Number Number -> Number] [List-of Number]
          ;               [List-of Instr] -> [List-of Number]
          ; evaluates a binary operator on top two numbers of stack, if present
          (define (stack-binop op stk instrs)
            (if (>= (length stk) 2)
                (eval env
                      (cons (op (first stk) (second stk))
                            (rest (rest stk)))
                      instrs)
                (list)))

          ; lookup-var : String [List-of Binding] [List-of Number]
          ;              [List-of Instr] -> [List-of Number]
          (define (lookup-var name env stk instrs)
            (cond [(empty? env) (list)]
                  [(cons? env) (if (equal? name (bind-name (first env)))
                                   (eval env
                                         (cons (bind-value (first env))
                                               stk)
                                         instrs)
                                   (lookup-var name (rest env) stk instrs))]))

          ; eval-instr : Instr [List-of Number] [List-of SimpleInstr] -> [List-of Number]
          ; evaluates a single instruction, given a stack and rest of instructions
          (define (eval-instr i stk instrs)
            (cond [(add? i) (stack-binop + stk instrs)]
                  [(mul? i) (stack-binop * stk instrs)]
                  [(sub? i) (stack-binop - stk instrs)]
                  [(push? i) (eval env (cons (push-num i) stk) instrs)]
                  [(var? i) (lookup-var (var-name i) env stk instrs)]))]
    (cond [(empty? instrs) stk]
          [(cons? instrs) (eval-instr (first instrs) stk (rest instrs))])))

;; Your first task is to first define an updated version of `simple-stack-verify`.
;; This time it will take a substitution (set of variable bindings) that it
;; can pass to `eval`.

; stack-verify : [List-of Binding] [List-of Instr] [List-of Instr] -> Boolean
(define (stack-verify env p1 p2) ...)

;; Next, define an updated version of `simple-const-fold` that does
;; more sophisticated constant folding: collapsing any sequence of arithmetic operations that
;; can be collapsed (so, if they do not involve a variable).
;; Note: We still don't want to worry about folding that only becomes
;; obvious after an earlier round. 

; const-fold : [List-of Instr] -> [List-of Instr]
(define (const-fold p) ...)


;; Third, define a generator for `Instr`:

; choose-instr : [Generator Instr]
(define choose-instr ...)

;; And a generator for variable bindings:

; choose-bind : [Generator Binding]
(define choose-bind ...)

;; And run similar PBT testing via quickcheck of your new `const-fold`:

(quickcheck (property [...] ...))


;; Fourth, a symbolic `Instr`, a symbolic Program of up to 4 instructions,
;; and an environment of up to 2 bindings.
;; Note that these are pretty small values, but the runtime, depending on
;; how you implement things, might increase quite a bit, if these are
;; much larger. 

; symbolic-instr : [Symbolic Instr]
(define (symbolic-instr) ...)


; symbolic-prog : [Symbolic [List-of Instr]]
(define symbolic-prog ...)

; symbolic-bind : [Symbolic Binding]
(define (symbolic-bind) ...)

; symbolic-env : [Symbolic [List-of [Symbolic Binding]]]
(define symbolic-env ...)
                                 

;; A finally, again `verify` that applying `const-fold` to your `symbolic-prog` results in
;; a program that is equal according to `stack-verify`, being sure to
;; pass in the symbolic env to `stack-verify`.

(verify (assert ...))

